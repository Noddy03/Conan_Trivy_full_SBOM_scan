name: cdxgen conan test

on:
  workflow_dispatch:
    inputs:
      src_repository:
        description: 'Source Repository (e.g., user/repo)'
        required: true
        default: ''
      src_branch:
        description: 'Branch of source repository'
        required: false
        default: ''
      conan_repository:
        description: 'Repository containing conanfile.py'
        required: true
        default: ''
      conan_branch:
        description: 'Branch for Conan repository'
        required: false
        default: 'main'
      src_type:
        description: 'Project Type (java, python, dotnet, cpp, c++)'
        required: false
        default: 'cpp'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      # -----------------------------
      # SETUP ENVIRONMENT
      # -----------------------------
      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # -----------------------------
      # CHECKOUT REPOSITORIES
      # -----------------------------
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.src_repository }}
          ref: ${{ inputs.src_branch }}
          path: project-src

      - name: Checkout Conan repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.conan_repository }}
          ref: ${{ inputs.conan_branch }}
          path: conan-src

      # -----------------------------
      # INSTALL DEPENDENCIES
      # -----------------------------
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install conan cyclonedx-python-lib
          npm install -g @cyclonedx/cdxgen

      - name: Detect Conan profile
        run: conan profile detect --force

      # -----------------------------
      # CREATE CONAN LOCKFILE
      # -----------------------------
      - name: Debug conanfile.py location
        run: find conan-src -name "conanfile.py"

      - name: Generate Conan lockfile
        run: |
          conan lock create conanfile.py --lockfile-out=conan.lock
        working-directory: conan-src

      # -----------------------------
      # FIND SOURCE CODE DIRECTORY
      # -----------------------------
      - name: Find main source folder
        id: srcfolder
        run: |
          echo "Searching for C++ source files in project-src..."
          src_dir=$(find project-src -type f \( -name "*.cpp" -o -name "*.cxx" -o -name "*.cc" -o -name "*.c" -o -name "*.hpp" -o -name "*.h" \) -printf '%h\n' | sort -u | head -n 1)
          if [ -z "$src_dir" ]; then
            echo "No C++ source files found in project-src!"
            exit 1
          fi
          echo "Detected source directory: $src_dir"
          echo "src_dir=$src_dir" >> $GITHUB_OUTPUT

      - name: Debug detected source folder contents
        run: |
          echo "Listing up to 50 files found in source directory:"
          find "${{ steps.srcfolder.outputs.src_dir }}" -type f | head -n 50

      # -----------------------------
      # GENERATE SBOM
      # -----------------------------
      - name: Check cdxgen version
        run: cdxgen --version

      - name: Generate SBOM with cdxgen
        run: |
          echo "Generating SBOM for project..."
          cdxgen -t cpp \
            -o sbom.json \
            --lockfile $GITHUB_WORKSPACE/conan-src/conan.lock \
            "${{ steps.srcfolder.outputs.src_dir }}" \
          || echo '{"bomFormat":"CycloneDX","specVersion":"1.5","components":[]}' > sbom.json
        working-directory: project-src

      - name: Verify SBOM file exists
        run: ls -l project-src/sbom.json

      # -----------------------------
      # SCAN SBOM WITH TRIVY
      # -----------------------------
      - name: Scan SBOM with Trivy
        run: |
          docker run --rm \
            -v "${{ github.workspace }}/project-src":/app:rw \
            -t aquasec/trivy:latest sbom \
            --format "cyclonedx" \
            --scanners vuln,license \
            --output /app/trivy-report-cdxgen-src.json \
            /app/sbom.json

      # -----------------------------
      # UPLOAD RESULTS
      # -----------------------------
      - name: Prepare artifact name
        id: artifactname
        run: |
          out_name="${{ inputs.src_repository }}"
          out_name="${out_name//\//-}"
          echo "out_name=$out_name" >> $GITHUB_OUTPUT

      - name: Upload SBOM and Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifactname.outputs.out_name }}
          path: |
            project-src/sbom.json
            project-src/trivy-report-cdxgen-src.json
          if-no-files-found: warn
