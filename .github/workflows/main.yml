name: Conan + Trivy Full SBOM Scan

on:
  workflow_dispatch:
    inputs:
      src_repository:
        description: 'Source Repository (e.g., user/repo)'
        required: true
      src_branch:
        description: 'Branch of source repository'
        required: false
        default: 'main'
      conan_repository:
        description: 'Repository containing conanfile.py'
        required: true
      conan_branch:
        description: 'Branch for Conan repository'
        required: false
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      # Setup base environment
      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Checkout both repositories
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.src_repository }}
          ref: ${{ inputs.src_branch }}
          path: project-src

      - name: Checkout Conan repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.conan_repository }}
          ref: ${{ inputs.conan_branch }}
          path: conan-src

      # Install Conan and dependencies
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect --force

      # Generate Conan lockfile
      - name: Generate Conan lockfile
        run: |
          conan lock create conanfile.py --lockfile-out=conan.lock
        working-directory: conan-src

      # Copy lockfile to source directory for scanning
      - name: Copy Conan lockfile
        run: cp conan-src/conan.lock project-src/conan.lock

      # --- SETUP TRIVY ---
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.3

      # --- GENERATE SBOM (CycloneDX) ---
      - name: Generate SBOM for both repositories
        run: |
          mkdir -p sbom-output
          trivy fs --format cyclonedx -o sbom-output/sbom-source.json ./project-src
          trivy fs --format cyclonedx -o sbom-output/sbom-conan.json ./conan-src

      # --- MERGE SBOMS ---
      - name: Merge SBOM files
        run: |
          cat > merge_sbom.py <<'EOF'
          import json
          import sys

          def merge_sboms(sbom_paths, output_path):
              merged = {
                  "bomFormat": "CycloneDX",
                  "specVersion": "1.5",
                  "components": [],
                  "metadata": {}
              }

              for path in sbom_paths:
                  with open(path, "r") as f:
                      sbom = json.load(f)
                      components = sbom.get("components", [])
                      merged["components"].extend(components)

              # Remove duplicates
              unique = {}
              for comp in merged["components"]:
                  key = (comp.get("name"), comp.get("version"))
                  unique[key] = comp
              merged["components"] = list(unique.values())

              with open(output_path, "w") as f:
                  json.dump(merged, f, indent=2)

          if __name__ == "__main__":
              merge_sboms(sys.argv[1:], "sbom-output/merged-sbom.json")
          EOF

          python merge_sbom.py sbom-output/sbom-source.json sbom-output/sbom-conan.json

      # --- UPLOAD ARTIFACTS ---
      - name: Sanitize artifact name
        id: sanitize
        run: |
          SAFE_NAME=$(echo "${{ inputs.src_repository }}" | tr '/' '_')
          echo "name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: Upload merged SBOM
        uses: actions/upload-artifact@v4
        with:
          name: merged-sbom-${{ steps.sanitize.outputs.name }}
          path: sbom-output/merged-sbom.json
          if-no-files-found: warn
